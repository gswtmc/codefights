'''
Given a sequence of integers as an array, determine whether it is possible to obtain
a strictly increasing sequence by removing no more than one element from the array.

Example

For sequence = [1, 3, 2, 1], the output should be
almostIncreasingSequence(sequence) = false;

There is no one element in this array that can be removed in order to get a strictly increasing sequence.

For sequence = [1, 3, 2], the output should be
almostIncreasingSequence(sequence) = true.

You can remove 3 from the array to get the strictly increasing sequence [1, 2]. 
Alternately, you can remove 2 to get the strictly increasing sequence [1, 3].

Input/Output

[execution time limit] 4 seconds (py)

[input] array.integer sequence

Guaranteed constraints:
2 ≤ sequence.length ≤ 105,
-105 ≤ sequence[i] ≤ 105.

[output] boolean

Return true if it is possible to remove one element from the array in order to get a strictly increasing sequence, 
otherwise return false.

'''

def almostIncreasingSequence(sequence):
    prior=sequence[0]
    for i in range(1,len(sequence)):
        if sequence[i] <= prior:
            s1 = sequence[:i] + sequence[i+1:]
            s2 = sequence[:i-1] + sequence [i:]
        prior = sequence[i]
    return s1 == sorted(set(s1)) or s2 == sorted(set(s2))


'''
First Attempt

def almostIncreasingSequence(sequence):
    counts = 0
    if len(sequence) <= 2:
        counts = 0
    else:
        if sequence[0] >= sequence[1]:
            counts += 1
        if sequence[-1] <= sequence[-2]:
            counts += 1
        for n in range(1,len(sequence)-2):
            if sequence[n] >= sequence[n+1]:
                if sequence[n-1] >= sequence[n+1]:
                    if sequence[n] >= sequence[n+2]:
                        counts += 2
                    else:
                        counts += 1
                else:
                    counts += 1

    
    if counts > 1:
        return False
    else:
        return True
'''
